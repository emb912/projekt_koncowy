{"ast":null,"code":"var _jsxFileName = \"/Users/em/Desktop/IS/projekt_koncowy/client/src/components/data/amounts/AmountsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AmountsChart = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s(({\n  data\n}, ref) => {\n  _s();\n  const [chartInst, setChartInstance] = useState(null);\n  useImperativeHandle(ref, () => ({\n    downloadChart() {\n      if (chartInst) {\n        const link = document.createElement('a');\n        link.href = chartInst.toBase64Image();\n        link.download = 'amounts_chart.png';\n        link.click();\n      }\n    }\n  }));\n  useEffect(() => {\n    if (data.length > 0) {\n      const chartData = {};\n      const keys = [...new Set(data.map(item => `${item.region} ${item.type} ${item.surface}`))];\n      const colors = generateRandomColors(keys.length);\n      data.forEach(item => {\n        const key = `${item.region}: ${item.type}, ${item.surface}`;\n        if (!chartData[key]) {\n          chartData[key] = [];\n        }\n        chartData[key].push({\n          x: `${item.year} Q${item.quarter}`,\n          y: item.number,\n          surface: item.surface\n        });\n      });\n      const ctx = document.getElementById('myChart').getContext('2d');\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n      const datasets = Object.keys(chartData).map((key, index) => {\n        const color = colors[index];\n        return {\n          label: key,\n          data: chartData[key],\n          backgroundColor: color,\n          borderColor: color.replace('0.5', '1'),\n          borderWidth: 1,\n          pointRadius: 5,\n          pointHoverRadius: 8,\n          showLine: true\n        };\n      });\n      const chartInst = new Chart(ctx, {\n        type: 'line',\n        data: {\n          datasets: datasets\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Rok i kwartał'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Liczba oddanych mieszkań'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const dataPoint = context.raw;\n                  return `Powierzchnia: ${dataPoint.surface} m², Liczba oddanych mieszkań: ${dataPoint.y}`;\n                }\n              }\n            }\n          }\n        }\n      });\n      setChartInstance(chartInst);\n    }\n  }, [data]);\n  const generateRandomColors = numColors => {\n    const colors = [];\n    for (let i = 0; i < numColors; i++) {\n      const color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`;\n      colors.push(color);\n    }\n    return colors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"amountsChart\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}, \"gVMQk/J7vRsMsv0423/rEZehaXM=\")), \"gVMQk/J7vRsMsv0423/rEZehaXM=\");\n_c2 = AmountsChart;\nexport default AmountsChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"AmountsChart$forwardRef\");\n$RefreshReg$(_c2, \"AmountsChart\");","map":{"version":3,"names":["React","useEffect","useState","forwardRef","useImperativeHandle","Chart","jsxDEV","_jsxDEV","AmountsChart","_s","_c","data","ref","chartInst","setChartInstance","downloadChart","link","document","createElement","href","toBase64Image","download","click","length","chartData","keys","Set","map","item","region","type","surface","colors","generateRandomColors","forEach","key","push","x","year","quarter","y","number","ctx","getElementById","getContext","existingChart","getChart","destroy","datasets","Object","index","color","label","backgroundColor","borderColor","replace","borderWidth","pointRadius","pointHoverRadius","showLine","options","scales","title","display","text","plugins","tooltip","callbacks","context","dataPoint","raw","numColors","i","Math","floor","random","children","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/em/Desktop/IS/projekt_koncowy/client/src/components/data/amounts/AmountsChart.js"],"sourcesContent":["import React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst AmountsChart = forwardRef(({ data }, ref) => {\n    const [chartInst, setChartInstance] = useState(null);\n\n    useImperativeHandle(ref, () => ({\n        downloadChart() {\n            if (chartInst) {\n                const link = document.createElement('a');\n                link.href = chartInst.toBase64Image();\n                link.download = 'amounts_chart.png';\n                link.click();\n            }\n        }\n    }));\n\n    useEffect(() => {\n        if (data.length > 0) {\n            const chartData = {};\n            const keys = [...new Set(data.map(item => `${item.region} ${item.type} ${item.surface}`))];\n            const colors = generateRandomColors(keys.length);\n\n            data.forEach(item => {\n                const key = `${item.region}: ${item.type}, ${item.surface}`;\n                if (!chartData[key]) {\n                    chartData[key] = [];\n                }\n                chartData[key].push({ x: `${item.year} Q${item.quarter}`, y: item.number, surface: item.surface });\n            });\n\n            const ctx = document.getElementById('myChart').getContext('2d');\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n                existingChart.destroy();\n            }\n\n            const datasets = Object.keys(chartData).map((key, index) => {\n                const color = colors[index];\n                return {\n                    label: key,\n                    data: chartData[key],\n                    backgroundColor: color,\n                    borderColor: color.replace('0.5', '1'),\n                    borderWidth: 1,\n                    pointRadius: 5,\n                    pointHoverRadius: 8,\n                    showLine: true\n                };\n            });\n\n            const chartInst = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    datasets: datasets\n                },\n                options: {\n                    scales: {\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Rok i kwartał'\n                            }\n                        },\n                        y: {\n                            title: {\n                                display: true,\n                                text: 'Liczba oddanych mieszkań'\n                            },\n                        }\n                    },\n                    plugins: {\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    const dataPoint = context.raw;\n                                    return `Powierzchnia: ${dataPoint.surface} m², Liczba oddanych mieszkań: ${dataPoint.y}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            setChartInstance(chartInst);\n        }\n    }, [data]);\n\n    const generateRandomColors = (numColors) => {\n        const colors = [];\n        for (let i = 0; i < numColors; i++) {\n            const color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`;\n            colors.push(color);\n        }\n        return colors;\n    };\n\n    return (\n        <div>\n            <canvas id=\"amountsChart\" width=\"400\" height=\"400\"></canvas>\n        </div>\n    );\n});\n\nexport default AmountsChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}